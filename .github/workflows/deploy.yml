name: Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v4

      - name: Generate Short SHA
        id: short_sha
        run: echo "SHA8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Upload New Version
        id: upload_version
        uses: cloudflare/wrangler-action@v3.14.1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4.4.0'
          command: versions upload --env prod --message "${{ github.event.head_commit.message }}" --tag "${{ steps.short_sha.outputs.SHA8 }}"

      - name: List Versions
        id: list_versions
        uses: cloudflare/wrangler-action@v3.14.1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4.4.0'
          command: versions list --env prod --json

      - name: Extract New Version ID
        id: extract_version
        run: |
          VERSIONS_JSON='${{ steps.list_versions.outputs.command-output }}'
          echo "Versions JSON: $VERSIONS_JSON"
          NEW_VERSION=$(echo "$VERSIONS_JSON" | jq -r '.[0].id')
          echo "New Version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Deploy New Version
        if: steps.extract_version.outputs.new_version != ''
        uses: cloudflare/wrangler-action@v3.14.1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4.4.0'
          command: versions deploy ${{ steps.extract_version.outputs.new_version }}@100% --env prod -y

      - name: Error if no valid version
        if: steps.extract_version.outputs.new_version == ''
        run: |
          echo "Error: No valid version found"
          exit 1
